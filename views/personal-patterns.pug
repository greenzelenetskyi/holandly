extends personal-visitors
block block_patterns
    #patternsView.tab-content.shadow-lg.p-3.mb-5.bg-white.rounded
        .input-group
            a.userLink.card-link(href='user/andrey')
                | user/andrey
            a.form-control.invisible
            .input-group-append
                button.btn.btn-outline-secondary(type='button', data-toggle='modal', data-target='#editEvents-modal-form').invisible
                button.btn.btn-primary(type='button', data-toggle='modal', data-target='#pattern-modal-form')
                    | + Создать новый шаблон
        hr
        #pattern-row.row()
    #patternEdit.tab-content.shadow-lg.p-3.mb-5.bg-white.rounded(hidden)
        .card
            .card-header
                strong#editPatternType templatePatternType
                button#closeCalendar.float-right.btn.btn-outline-secondary(type='button') Закрыть
            .card-body
                .row
                    .col-sm-6
                        #calendar
                    .col-sm-6
                        #calendarList
    //Modal new pattern
    #pattern-modal-form.modal.fade(tabindex='-1', role='dialog', aria-labelledby='newPatternModalLabel', aria-hidden='true')
        form
            .modal-dialog.modal-lg(role='document')
                .modal-content
                    .modal-header
                        h5#newPatternModalLabel.modal-title Шаблон события
                        button.close(type='button', data-dismiss='modal', aria-label='Close')
                            span(aria-hidden='true') ×
                    .modal-body
                        input#modalPattern_patternId(type='text', hidden)
                        .form-group
                            label(for='inputPatternType') Тип события
                            input#inputPatternType.form-control(type='text', aria-describedby='typeHelp', minlength='5')
                            small#typeHelp.font-italic.form-text.text-muted Краткое название типа собития
                        .form-group
                            label(for='inputDescription') Описание
                            textarea#inputDescription.form-control(aria-label='With textarea', aria-describedby='descriptionHelp', minlength='5')
                            small#descriptionHelp.font-italic.form-text.text-muted Полное описание типа собития
                        .row
                            .col
                                .form-group
                                    label(for='inputNumber') Количество участников
                                    input#inputNumber.form-control(type='number', placeholder='1', min='1')
                                .form-group.form-check
                                    input#inputMultiAccess.form-check-input(type='checkbox')
                                    label.form-check-label(for='inputMultiAccess') Однократное участие
                            .col
                                .form-group
                                    label(for='inputDuration') Продолжительность, мин
                                    input#inputDuration.form-control(type='number', placeholder='10', min='1')
                    .modal-footer
                        button.btn.btn-outline-secondary(type='button', data-dismiss='modal') Отмена
                        input.btn.btn-primary(type='submit', value='Создать')

    //--- template pattern -----------------------------
    #templatePattern(hidden)
        //.col-sm-4
        .card.border-primary.mb-4
            .card-header
                strong templatePatternType
                .rouded.float-right
                    img.patternScheduler.img-fluid.btn-outline-success.ico(src='../img/EventAdd.png'
                    data-patternID= 'templatePatternId', data-tooltip="tooltip" title="Заплпнировать событие")
                    img.editPattern.img-fluid.btn-outline-info.ico(src='../img/PatternEdit.png'
                    data-patternID= 'templatePatternId', data-tooltip="tooltip" title="Редактировать шаблон" data-toggle="modal" data-target="#pattern-modal-form")
                    img.removePattern.img-fluid.btn-outline-danger.ico(src='../img/PatternDelete.png'
                    data-patternID= 'templatePatternId', data-tooltip="tooltip" title="Удалить шаблон" data-toggle="modal" removeType="pattern" data-target="#remove-modal-form")
            .card-body.text-primary
                p.em.small.font-italic templatePattern-description
                p.em.small Колличество участников: templatePattern-number
                p.em.small Продолжтельность: templatePattern-duration
                p.em.small templatePattern-condition
                //p.em.small Заплпнировано событий: templatePattern-amount


    //Modal edit events
    #editEvents-modal-form.modal.fade(tabindex='-1', role='dialog',  aria-hidden='true')
        form#eventScheduler
            .modal-dialog(role='document')
                .modal-content
                    .modal-header
                        h5#editEventsTitleLabel.modal-title Планировщик
                    .modal-body
                        .tab-container
                            .form-group
                                .card
                                    .card-header
                                        label Время начала
                                    .card-body
                                        ul#eventStartTimes.list-group.list-group-flush
                                        button.btn.btn-link.addStartTime(type='button') + добавить
                            .tab-navigation
                                .card
                                    .card-header
                                        select#select-repeat
                                            option(value='1') Не повторять
                                            option(value='2') Повторять по дням недели
                                            option(value='3') Повторять по датам
                                        #tab-1.tab-content
                                        #tab-2.tab-content
                                            each val, index in {1:'ПН',2:'ВТ',3:'СР',4:'ЧТ',5:'ПТ',6:'СБ',0:'ВС'}
                                                .form-check.form-check-inline
                                                    input.dayOfWeek( id="inlineCheckbox" + index ).form-check-input(type='checkbox', selectDayCode= index)
                                                    label.form-check-label(for= "inlineCheckbox" + index )= val
                                            .form-group
                                                label(for='finalDate') Дата окончания
                                                input#finalDate.form-control(type='date')
                                        #tab-3.tab-content
                                            #calendarScheduler
                    .modal-footer
                        button.btn.btn-outline-secondary(type='button', data-dismiss='modal') Отмена
                        input.btn.btn-primary(type='submit', value='Заплпнировать')
    //--- template start time -----------------------------
    span(hidden) template
        #templateStarTime
            li.list-group-item.d-flex.justify-content-between.align-items-center
                input.liTime.form-control(type='time', data-value="", data-eventId="0")
                img.removeEvent.img-fluid.btn-outline-danger.ico(src='../img/trash.png',
                data-eventId="0", data-tooltip='tooltip', data-original-title='Удалить')
    //==========================================================
    script.
        var ScheduledEvents = []
        var userPatterns = {}
        var editPatternEvents = {}

        $(document).ready(function () {
            $('#eventScheduler .tab-content').hide();
            $('#select-repeat').change(function sr() {
                $('#eventScheduler .tab-content').hide();
                dropdown = $('#select-repeat').val();
                $('#' + "tab-" + dropdown).show();
                $('#finalDate').val(moment(editPatternEvents.endDate).format('YYYY-MM-DD'));
            })

            $('.addStartTime').click(function () {
                appendTimeToSchedule();
            });

            var editPatternTimeModalForm = $("#editEvents-modal-form");
            editPatternTimeModalForm.submit(function (event) {
                event.preventDefault();
                editPatternTimeModalForm.modal('hide');
                editPatternEvents.newTimes = getScheduledTimes();
                editPatternEvents.newDates = getScheduledDates();
                saveEditedEvents(editPatternEvents);
            });
        })

        function getScheduledTimes() {
            var times = []
            $('.liTime').each(function (i, el) {
                if (el.value !== '')
                    times.push({time: el.value, eventId: el.getAttribute('data-eventId')})
            })
            return times;
        }

        function getScheduledDates() {
            var dates = []
            var repeatOption = $('#select-repeat').val();
            if (repeatOption === '3') {
                return editPatternEvents.selectedDates;//getDates(editPatternEvents.startDate, editPatternEvents.endDate);
            }
            if (repeatOption === '2') {
                editPatternEvents.endDate = $('#finalDate').val();
                var selectedDay = [];
                $('.dayOfWeek').each(function (i) {
                    if ($(this)[0].checked) {
                        selectedDay.push($(this)[0].getAttribute('selectDayCode') * 1);
                    }
                });
                return getDates(editPatternEvents.startDate, editPatternEvents.endDate, selectedDay);
            }
            return getDates(editPatternEvents.startDate, editPatternEvents.endDate);
        }

        function saveEditedEvents(editPatternEvents) {
            var events = [];
            editPatternEvents.newTimes.forEach(function (editTime) {
                editPatternEvents.newDates.forEach(function (editDate) {
                    events.push({
                            eventId: editTime.eventId,
                            patternId: editPatternEvents.patternId,
                            date: editDate,
                            reason: '',
                            time: editTime.time
                        }
                    )
                })
            })
            if (events.length > 0) {
                putEvent(events);
            }
            else {
                alert('Событий не запланировано! \r Возможно нет задания времени события. ')
            }
        }

        function appendTimeToSchedule(timeEvent) {
            var elem = document.createElement('div');
            var tempTime = document.getElementById('templateStarTime').cloneNode(true).innerHTML;
            if (!!timeEvent) {
                tempTime = tempTime.replace(/data-value=""/gi, 'value = \'' + timeEvent.time + '\'');
                tempTime = tempTime.replace(/data-eventId="0"/gi, 'data-eventId= \'' + timeEvent.eventId + '\'');
            }
            elem.innerHTML = tempTime;
            document.getElementById('eventStartTimes').appendChild(elem);
            addHandlerRemoveScheduledEvent('.removeEvent');
        }

        function getDateEvents(date, patternID) {
            var dateEvents = [];
            var patternsEvents = userPatterns[patternID].scheduledEvents;
            patternsEvents.forEach(function (event, i, data) {
                if (moment(event.date).isSame(date, 'day')) {
                    dateEvents.push(event);
                }
            })
            editPatternEvents.editTimes = dateEvents;
          //  console.log(dateEvents)
            return dateEvents
        }

        function addScheduledTime(ScheduledEvents) {
            Object.values(ScheduledEvents).forEach(function (event, i, data) {
                appendTimeToSchedule(event);
            });
        }

        function EventSchedulerShow(editDate) {
            $('#select-repeat').val(1);
            $('#eventScheduler .tab-content').hide();
            document.getElementById('eventStartTimes').innerHTML = '';
            $('#editEvents-modal-form').modal();
            if (!!editDate)
                addScheduledTime(getDateEvents(editDate.startDate, editDate.patternId));
            editPatternEvents.selectedDates = [];
          //  $('#calendarScheduler').fullCalendar('renderEvents', backgroundDates(editPatternEvents.selectedDates));
        }


        $(document).ready(function () {
            editPatternEvents.selectedDates = [];
            var calendarScheduler = $('#calendarScheduler');
            calendarScheduler.fullCalendar({
                header: {right: 'today, prev,next'},
                defaultView: 'month',
                locale: 'ru',
                selectable: true,
                select: function (startDate, endDate) {
                    getDates(startDate, endDate).forEach(function (date) {
                        var index = editPatternEvents.selectedDates.indexOf(date);
                        if (index === -1) {
                            editPatternEvents.selectedDates.push(date);
                        }
                        else {
                            editPatternEvents.selectedDates.splice(index, 1);
                        }
                    })
                    calendarScheduler.fullCalendar('removeEvents');
                    calendarScheduler.fullCalendar('renderEvents', backgroundDates(editPatternEvents.selectedDates));
                },
                viewRender: function () {
                    calendarScheduler.fullCalendar('renderEvents', backgroundDates(editPatternEvents.selectedDates));
                }
            });
        });

        $(document).ready(function () {
            $('#closeCalendar').click(function () {
                $('#patternEdit')[0].hidden = true;
                $('#patternsView')[0].hidden = false;
            });

            $('#pattern-modal-form').on('show.bs.modal', function () {
                console.log(this)
                console.log('show')
            });
        })

        function getDates(startDate, endDate, weekDays) {
            var dateArray = [];
            var currentDate = moment(startDate);
            var stopDate = moment(endDate);
            while (currentDate < stopDate) {
                if (!!weekDays) {
                    if (weekDays.indexOf(moment(currentDate).days()) !== -1)
                        dateArray.push(currentDate.format());
                }
                else {
                    dateArray.push(currentDate.format());
                }
                currentDate = moment(currentDate).add(1, 'days');
            }
            // console.log(dateArray)
            return (dateArray);
        }

        function backgroundDates(dates) {
            return dates.map(function (date) {
                return {
                    start: date,
                    rendering: 'background',
                    overlap: false,
                    color: '#0109ff'
                };
            });
        }

        function makePatternCard(data) {
            var patternTab = document.getElementById('pattern-row');
            patternTab.innerHTML = '';
            if (typeof data === "object") {
                data.forEach(function (pattern) {
                    newCard = document.createElement('div');
                    newCard.classList.add('col-sm-4');
                    tempCard = document.getElementById('templatePattern').cloneNode(true).innerHTML;
                    tempCard = tempCard.replace(/templatePatternType/gi, pattern.type);
                    tempCard = tempCard.replace(/templatePatternId/gi, pattern.patternId);
                    tempCard = tempCard.replace(/templatePattern-description/gi, pattern.description);
                    tempCard = tempCard.replace(/templatePattern-number/gi, pattern.number);
                    tempCard = tempCard.replace(/templatePattern-duration/gi, pattern.duration);
                    tempCard = tempCard.replace(/templatePattern-condition/gi, '');
                    // tempCard = tempCard.replace(/templatePattern-amount/gi, pattern.duration);
                    newCard.innerHTML = tempCard;
                    patternTab.appendChild(newCard);
                })
            }
            addHandlerRemovePattern('.removePattern');
            addHandlerEditPattern('.editPattern');
            addHandlerPatternScheduler('.patternScheduler');
        }

