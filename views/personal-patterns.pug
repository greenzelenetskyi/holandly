extends personal-visitors
block block_patterns
    #patternsView.tab-content.shadow-lg.p-3.mb-5.bg-white.rounded
        .input-group
            a.card-link(href='user/andrey')
                | user/andrey
            a.form-control.invisible
            .input-group-append
                button.btn.btn-outline-secondary(type='button', data-toggle='modal', data-target='#editEvents-modal-form').invisible
                button.btn.btn-primary(type='button', data-toggle='modal', data-target='#pattern-modal-form')
                    | + Создать новый шаблон
        hr
        #pattern-row.row()
    #patternEdit.tab-content.shadow-lg.p-3.mb-5.bg-white.rounded(hidden)
        .card
            .card-header
                strong#editPatternType templatePatternType
                button#closeCalendar.float-right.btn.btn-outline-secondary(type='button') Закрыть
            .card-body
                .row
                    .col-sm-6
                        #calendar
                    .col-sm-6
                        #calendarList
    //Modal new pattern
    #pattern-modal-form.modal.fade(tabindex='-1', role='dialog', aria-labelledby='newPatternModalLabel', aria-hidden='true')
        form
            .modal-dialog.modal-lg(role='document')
                .modal-content
                    .modal-header
                        h5#newPatternModalLabel.modal-title Шаблон события
                        button.close(type='button', data-dismiss='modal', aria-label='Close')
                            span(aria-hidden='true') ×
                    .modal-body
                        input#modalPattern_patternId(type='text', hidden='')
                        .form-group.row
                            label.col-sm-4.col-form-label(for='inputPatternType') Тип
                            .col-sm-8
                                input#inputPatternType.form-control(type='text', placeholder='Type', minlength='5')
                            label.col-sm-4.col-form-label(for='inputNumber') Количество
                            .col-sm-8
                                input#inputNumber.form-control(type='number', min='1')
                            label.col-sm-4.col-form-label(for='inputDuration') Продолжительность
                            .col-sm-8
                                input#inputDuration.form-control(type='number', min='1')
                            label.col-sm-4.col-form-label(for='inputDescription') Описание
                            .col-sm-8
                                textarea#inputDescription.form-control(aria-label='With textarea')
                            label.col-sm-10.col-form-label(for='inputMultiAccess')
                                | Зпрет
                                | многократной подписки на событие
                                .col-sm-2
                                    input#inputMultiAccess.form-control(type='checkbox')
                    .modal-footer
                        button.btn.btn-outline-secondary(type='button', data-dismiss='modal') Отмена
                        input.btn.btn-primary(type='submit', value='Создать')
    //--- template pattern -----------------------------
    #templatePattern
        .col-sm-4
            .card.border-primary.mb-4
                .card-header
                    strong templatePatternType
                    .rouded.float-right
                        img.img-fluid.btn-outline-success.ico(src='../img/EventAdd.png'
                        data-tooltip="tooltip" title="Заплпнировать событие")
                        img.img-fluid.btn-outline-info.ico(src='../img/PatternEdit.png'
                        data-tooltip="tooltip" title="Редактировать шаблон" data-toggle="modal" data-target="#pattern-modal-form")
                        img.img-fluid.btn-outline-danger.ico(src='../img/PatternDelete.png'
                        data-tooltip="tooltip" title="Удалить шаблон" data-toggle="modal" removeType="pattern" data-target="#remove-modal-form")
                .card-body.text-success
                    p.em.small templatePattern-description
                    p.em.small Колличество участников: templatePattern-number
                    p.em.small Продолжтельность: templatePattern-duration
                    p.em.small templatePattern-condition
                    p.em.small Заплпнировано событий: templatePattern-amount


    //Modal edit events
    #editEvents-modal-form.modal.fade(tabindex='-1', role='dialog',  aria-hidden='true')
        form#eventScheduler
            .modal-dialog(role='document')
                .modal-content
                    .modal-header
                        h5#editEventsTitleLabel.modal-title Планировщик
                    .modal-body
                        .tab-container
                            .form-group
                                .card
                                    .card-header
                                        label Время начала
                                    .card-body
                                        ul#eventStartTimes.list-group.list-group-flush
                                        button.btn.btn-link.addStartTime(type='button') + добавить
                            .tab-navigation
                                .card
                                    .card-header
                                        select#select-repeat
                                            option(value='1') Не повторять
                                            option(value='2') Повторять по дням недели
                                            option(value='3') Повторять по датам
                                        #tab-1.tab-content
                                        #tab-2.tab-content
                                            each val, index in {1:'ПН',2:'ВТ',3:'СР',4:'ЧТ',5:'ПТ',6:'СБ',7:'ВС'}
                                                .form-check.form-check-inline
                                                    input( id="inlineCheckbox" + index ).form-check-input(type='checkbox', value=('option' + index) )
                                                    label.form-check-label(for= 'inlineCheckbox' + index )= val
                                            .form-group
                                                label(for='finalDate') Дата окончания
                                                input#finalDate.form-control(type='date')
                                        #tab-3.tab-content
                                            #calendarScheduler
                    .modal-footer
                        button.btn.btn-outline-secondary(type='button', data-dismiss='modal') Отмена
                        input.btn.btn-primary(type='submit', value='Заплпнировать')
    //--- template start time -----------------------------
    span(hidden) template
        #templateStarTime
            li.list-group-item.d-flex.justify-content-between.align-items-center
                input.liTime.form-control(type='time', data-value="", data-eventId="0")
                img.removeEvent.img-fluid.btn-outline-danger.ico(src='../img/trash.png',
                data-eventId="0", data-tooltip='tooltip', data-original-title='Удалить')
    //==========================================================
    script.
        var ScheduledEvents = []
        var userPatterns = {}
        var editPatternEvents = {}

        $(document).ready(function () {
            $('#eventScheduler .tab-content').hide();
            $('#select-repeat').change(function sr() {
                $('#eventScheduler .tab-content').hide();
                dropdown = $('#select-repeat').val();
                $('#' + "tab-" + dropdown).show();
            })

            $('.addStartTime').click(function () {
                appendTimeToSchedule();
            });

            var editPatternTimeModalForm = $("#editEvents-modal-form");
            editPatternTimeModalForm.submit(function (event) {
                event.preventDefault();
                editPatternTimeModalForm.modal('hide');
                editPatternEvents.newTimes = getScheduledTimes();
                console.log(editPatternEvents)
                saveEditedEvents(editPatternEvents);
            });
        })

        function getScheduledTimes() {
            var times = []
            $('.liTime').each(function (i, el) {
                if (el.value !== '')
                    times.push({time: el.value, eventId: el.getAttribute('data-eventId')})
            })
            return times;
        }


        function saveEditedEvents(editPatternEvents) {
            var events = [];
            editPatternEvents.newTimes.forEach(function (editTime) {
                events.push({
                        eventId: editTime.eventId,
                        patternId: editPatternEvents.patternId,
                        date: editPatternEvents.startDate.format(),
                        reason: '',
                        time: editTime.time
                    }
                )
            })
            putEvent(events);
        }

        function appendTimeToSchedule(timeEvent) {
            var elem = document.createElement('div');
            var tempTime = document.getElementById('templateStarTime').cloneNode(true).innerHTML;
            if (!!timeEvent) {
                tempTime = tempTime.replace(/data-value=""/gi, 'value = \'' + timeEvent.time + '\'');
                tempTime = tempTime.replace(/data-eventId="0"/gi, 'data-eventId= \'' + timeEvent.eventId + '\'');
                console.log(timeEvent.time)
            }
            elem.innerHTML = tempTime;
            document.getElementById('eventStartTimes').appendChild(elem);
            addHandlerRemoveScheduledEvent('.removeEvent');
        }

        function getDateEvents(date, patternID) {
            var dateEvents = [];
            var patternsEvents = userPatterns[patternID].scheduledEvents;
            patternsEvents.forEach(function (event, i, data) {
                if (moment(event.date).isSame(date, 'day')) {
                    dateEvents.push(event);
                }
            })
            editPatternEvents.editTimes = dateEvents;
            console.log(dateEvents)
            return dateEvents
        }

        function addScheduledTime(ScheduledEvents) {
            document.getElementById('eventStartTimes').innerHTML = '';
            Object.values(ScheduledEvents).forEach(function (event, i, data) {
                appendTimeToSchedule(event);
            });
        }

        function EventSchedulerShow(editDate) {
            $('#select-repeat').val(1);
            $('#eventScheduler .tab-content').hide();
            $('#editEvents-modal-form').modal();
            if (!!editDate)
                addScheduledTime(getDateEvents(editDate.startDate, editDate.patternId));
        }


        $(document).ready(function () {
            var select = [];
            $('#calendarScheduler').fullCalendar({
                header: {right: 'today, prev,next'},
                defaultView: 'month',
                locale: 'ru',
                selectable: true,
                select: function (startDate, endDate) {
                    var selectDates = getDates(startDate, endDate, [1, 2]);
                    select = select.concat(selectDates);
                    $('#calendarScheduler').fullCalendar('renderEvents', select);
                },
                viewRender: function () {
                    $('#calendarScheduler').fullCalendar('renderEvents', select);
                }
            });
        });

        $(document).ready(function () {
            $('#closeCalendar').click(function () {
                $('#patternEdit')[0].hidden = true;
                $('#patternsView')[0].hidden = false;
            });
        })

        function getDates(startDate, endDate, weekDays) {
            var dateArray = [];
            var currentDate = moment(startDate);
            var stopDate = moment(endDate);
            while (currentDate < stopDate) {
                if (!!weekDays) {
                    if (weekDays.indexOf(moment(currentDate).days()) !== -1)
                        dateArray.push(currentDate);
                }
                else {
                    dateArray.push(currentDate);
                }
                currentDate = moment(currentDate).add(1, 'days');
            }
            //console.log(dateArray);
            backgroundDates(dateArray);
            return (dateArray);

        }

        function backgroundDates(dates) {
            return dates.map(function (date) {
                return {
                    start: date,
                    rendering: 'background'
                };
            });
        }

