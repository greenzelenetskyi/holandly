extends personal-visitors
block block_patterns
    #patternsView.tab-content.shadow-lg.p-3.mb-5.bg-white.rounded
        .input-group
            a.card-link(href='user/andrey')
                | user/andrey
            a.form-control.invisible
            .input-group-append
                button.btn.btn-outline-secondary(type='button', data-toggle='modal', data-target='#editEvents-modal-form').invisible
                button.btn.btn-primary(type='button', data-toggle='modal', data-target='#pattern-modal-form')
                    | + Создать новый шаблон
        hr
        #pattern-row.row
    #patternEdit.tab-content.shadow-lg.p-3.mb-5.bg-white.rounded(hidden)
        .card
            .card-header
                h5#editPatternType editPatternType
            .card-body
                #calendar
                hr
                .text-right
                    .btn-group
                        button#closeCalendar.btn.btn-outline-secondary(type='button')
                            | Закрыть
                        //button#saveCalendar.btn.btn-primary(type='button')
                        //    | Сохранить и закрыть
    //Modal new pattern
    #pattern-modal-form.modal.fade(tabindex='-1', role='dialog', aria-labelledby='newPatternModalLabel', aria-hidden='true')
        form
            .modal-dialog.modal-lg(role='document')
                .modal-content
                    .modal-header
                        h5#newPatternModalLabel.modal-title Шаблон события
                        button.close(type='button', data-dismiss='modal', aria-label='Close')
                            span(aria-hidden='true') ×
                    .modal-body
                        input#modalPattern_patternId(type='text', hidden='')
                        .form-group.row
                            label.col-sm-4.col-form-label(for='inputPatternType') Тип
                            .col-sm-8
                                input#inputPatternType.form-control(type='text', placeholder='Type', minlength='5')
                            label.col-sm-4.col-form-label(for='inputNumber') Количество
                            .col-sm-8
                                input#inputNumber.form-control(type='number', min='1')
                            label.col-sm-4.col-form-label(for='inputDuration') Продолжительность
                            .col-sm-8
                                input#inputDuration.form-control(type='number', min='1')
                            label.col-sm-4.col-form-label(for='inputDescription') Описание
                            .col-sm-8
                                textarea#inputDescription.form-control(aria-label='With textarea')
                            label.col-sm-10.col-form-label(for='inputMultiAccess')
                                | Зпрет
                                | многократной подписки на событие
                                .col-sm-2
                                    input#inputMultiAccess.form-control(type='checkbox')
                    .modal-footer
                        button.btn.btn-outline-secondary(type='button', data-dismiss='modal') Отмена
                        input.btn.btn-primary(type='submit', value='Создать')
    //--- template pattern -----------------------------
    span() template
        #templatePattern
            .col-sm-4
                .card.border-primary.mb-4
                    .card-header
                        strong templatePatternType
                        .rouded.float-right
                            img.img-fluid.btn-outline-success.ico(src='../img/EventAdd.png')
                            img.img-fluid.btn-outline-info.ico(src='../img/PatternEdit.png')
                            img.img-fluid.btn-outline-danger.ico(src='../img/PatternDelete.png')
                    .card-body
                        label Количество учасников:
                        label Продолжительность:

    //Modal edit events
    #editEvents-modal-form.modal.fade(tabindex='-1', role='dialog',  aria-hidden='true')
        form#eventScheduler
            .modal-dialog(role='document')
                .modal-content
                    .modal-header
                        h5#editEventsTitleLabel.modal-title Планировщик
                    .modal-body
                        .tab-container
                            .form-group
                                .card
                                    .card-header
                                        label Время начала
                                    .card-body
                                        ul#eventStartTimes.list-group.list-group-flush
                                        button.btn.btn-link.addStartTime(type='button') + добавить
                            .tab-navigation
                                .card
                                    .card-header
                                        select#select-repeat
                                            option(value='1') Не повторять
                                            option(value='2') Повторять по дням недели
                                            option(value='3') Повторять по датам
                                        #tab-1.tab-content
                                        #tab-2.tab-content
                                            each val, index in {1:'ПН',2:'ВТ',3:'СР',4:'ЧТ',5:'ПТ',6:'СБ',7:'ВС'}
                                                .form-check.form-check-inline
                                                    input( id="inlineCheckbox" + index ).form-check-input(type='checkbox', value=('option' + index) )
                                                    label.form-check-label(for= 'inlineCheckbox' + index )= val
                                            .form-group
                                                label(for='finalDate') Дата окончания
                                                input#finalDate.form-control(type='date')
                                        #tab-3.tab-content
                                            #calendarScheduler
                    .modal-footer
                        button.btn.btn-outline-secondary(type='button', data-dismiss='modal') Отмена
                        input.btn.btn-primary(type='submit', value='Заплпнировать')
    //--- template start time -----------------------------
    span(hidden) template
        #templateStarTime
            li.list-group-item.d-flex.justify-content-between.align-items-center
                input#testTime.form-control(type='time')
                img.img-fluid.btn-outline-danger.ico(src='../img/trash.png', data-tooltip='tooltip', data-original-title='Удалить')
    script.
        $(document).ready(function () {
            $('#eventScheduler .tab-content').hide();
            $('#select-repeat').change(function sr() {
                $('#eventScheduler .tab-content').hide();
                dropdown = $('#select-repeat').val();
                $('#' + "tab-" + dropdown).show();
            })

            $('.addStartTime').click(function () {
                var timeLi = document.getElementById('templateStarTime').cloneNode(true).outerHTML;

                document.getElementById('eventStartTimes').innerHTML += timeLi;

            })

            var editPatternTimeModalForm = $("#editEvents-modal-form");
            editPatternTimeModalForm.submit(function (event) {
                event.preventDefault();
                saveNewEvent(event);
                editPatternTimeModalForm.modal('hide');
            });
        })
        var editDate;
        var editPatternId;
        function saveNewEvent(event) {
            console.log(event.target)
            event.preventDefault();

            var newEvent = {};
            newEvent.eventId = null;
            newEvent.patternId = editPatternId;
            newEvent.date = editDate;
            newEvent.reason = '';
            newEvent.time = $("#testTime").val();
            console.log(newEvent);
            var eventArr = [];
            eventArr.push(newEvent)
            putEvent(eventArr);

        }


        function addScheduledTime() {
            Object.values(events).forEach(function (event, i, data) {
                var timeList = document.getElementById('eventStartTimes');
                timeList.innerHTML = '';
                if (event.patternId === editPatternId) {

                    var timeLi = document.getElementById('templateStarTime').cloneNode(true).outerHTML;

                    timeList.innerHTML += timeLi;
                }
            });
            console.log(events)
        }

        function EventSchedulerShow(startDate) {
            editDate = moment(startDate).format('YYYY-MM-DD');
            $('#select-repeat').val(1);
            $('#eventScheduler .tab-content').hide();
            addScheduledTime(events);
            $('#editEvents-modal-form').modal();
        }

        $(document).ready(function () {
            var select = [];
            $('#calendarScheduler').fullCalendar({
                header: {right: 'today, prev,next'},
                defaultView: 'month',
                locale: 'ru',
                selectable: true,
                select: function (startDate, endDate) {
                    console.log('selertwert');
                    console.log(select);
                    var selectDates = getDates(startDate, endDate);
                    select = select.concat(selectDates);
                    $('#calendarScheduler').fullCalendar('renderEvents', select);
                    console.log(getDates(startDate, endDate));
                },
                viewRender: function () {
                    $('#calendarScheduler').fullCalendar('renderEvents', select);
                }
            });
        });



        $(document).ready(function () {
            $('#closeCalendar').click(function () {
                $('#patternEdit')[0].hidden = true;
                $('#patternsView')[0].hidden = false;
            });
        })
